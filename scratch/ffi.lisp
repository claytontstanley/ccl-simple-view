
(#_GetCursor 5 4)
#_text
(#/setCursor)
(#_setCursor)
(ccl::load-external-function 'X86-Darwin64::|CGEventPost| nil)
(defun X86-DARWIN64::|setCursor| (&rest args)
  nil)
(setf *t* *)
(intern "hello")
(find-package :x86-darwin64)
(function X86-DARWIN64::|CGEventPost|)
(intern (format nil "~a::|~a|" "X86-DARWIN"))
(ccl::load-external-function)
(defvar *load-external-function-orig* #'ccl::load-external-function)
(defun ccl::load-external-function (sym query)
  (let* ((fun-names (list "getCursor" "setCursor"))
         (fun-syms (mapcar (lambda (name)
                             (intern name (find-package :X86-Darwin64)))
                           fun-names)))
    (if (member sym fun-syms)
      (return-from load-external-function sym)
      (funcall *load-external-function-orig* sym query))))
(in-package :ccl)
(defun load-external-function (sym query)
  (let* ((fun-names (list "getCursor" "setCursor"))
         (fun-syms (mapcar (lambda (name)
                             (intern name (find-package :X86-Darwin64)))
                           fun-names)))
    (when (member sym fun-syms)
      (return-from load-external-function sym)))
  (let* ((def (or (do-interface-dirs (d)
                    (let* ((f (db-lookup-function (db-functions d) sym)))
                      (when f (return f))))
                  (unless query
                    (error "Foreign function not found: ~s" sym)))))
    (if query
      (not (null def))
      (progn
        (setf (gethash sym (ftd-external-function-definitions
                             *target-ftd*)) def)
        (setf (macro-function sym) #'%external-call-expander)
        sym))))
(print *package*)
(require :cocoa)
(objc:load-framework "CARBON" :carbon)
(objc:load-framework "FOUNDATION" :foundation)
