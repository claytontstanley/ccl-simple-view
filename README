Directory Structure:

.
├── README
├── actr6
│   └── devices
├── bincarbon
│   ├── CFBundle.lisp
│   ├── base-trek-tasks.lisp
│   ├── blinker.lisp
│   ├── experiment-window4.lisp
│   ├── launch-url.lisp
│   ├── menubar-hide.lisp
│   ├── misc-lib.lisp
│   ├── pict-svm.lisp
│   ├── procedure-window2.lisp
│   ├── seq-math.lisp
│   ├── snd-player.dx64fsl
│   ├── snd-player.lisp
│   └── timer.lisp
├── binccl
│   ├── mcl-ccl-colors.lisp
│   ├── resources.dx64fsl
│   ├── resources.lisp
│   └── utilities.lisp
├── build
│   ├── Makefile
│   ├── ccl-simple-view.dx64fsl
│   ├── ccl-simple-view.lisp
│   ├── file-list.txt
│   ├── outFileHeader.lisp
│   ├── post-code.lisp
│   └── post-file-list.txt
├── docs
│   ├── Getting\ Started\ with\ MCL.pdf
│   ├── InterfaceBuilderWithCCLTutorial.pdf
│   └── Macintosh\ Common\ Lisp\ Ref.pdf
├── easygui
│   ├── extensions.dx64fsl
│   └── extensions.lisp
├── rmcl
│   └── lib
├── scratch
│   ├── dialog-item.lisp
│   ├── ffi.lisp
│   ├── image.lisp
│   ├── it-example1.lisp
│   └── scratch.lisp
├── submodules
│   ├── actr6
│   ├── ccl
│   ├── lisp-dev
│   └── rmcl
└── testing
    ├── Makefile
    ├── actr6 -> ../submodules/actr6
    ├── bincarbon -> ../bincarbon
    ├── bootstrap-mcl.lisp
    ├── bootstrap.dx64fsl
    ├── bootstrap.lisp
    ├── ccl -> ../submodules/ccl/dx86cl64
    ├── data
    ├── phaser -> /Volumes/RedGiant/X\ Support/X83\ Frank\ Trek\ 11/Experiment
    ├── testCCLDevice.dx64fsl
    ├── testCCLDevice.lisp
    ├── testGetText.dx64fsl
    ├── testGetText.lisp
    ├── testImages.dx64fsl
    ├── testImages.lisp
    ├── testPhaser.dx64fsl
    ├── testPhaser.lisp
    ├── testSound.dx64fsl
    ├── testSound.lisp
    ├── testTutorials.dx64fsl
    ├── testTutorials.lisp
    ├── testVotebox.dx64fsl
    ├── testVotebox.lisp
    ├── utilities.lisp -> ../binccl/utilities.lisp
    └── votebox -> /Volumes/RedGiant/Projects/ACCURATE/ACT-R\ VoteBox\ Models



actr6:		All .lisp files needed to build an ACT-R device for CCL that uses a Cocoa display. 
		-Note the share.lisp file lives here for now, which contains the MCL GUI interface for CCL

bincarbon:	All original MCL bincarbon code. Just a few files have minor tweaks to work with CCL. Timer is broken on CCL currently though.
		Other files, like CFBundle.lisp don't work at all on CCL, but aren't necessary on CCL. The main goal for this folder is to document
		all changes to bincarbon files when migrating to CCL, while maintaining backwards compatibility with MCL.

binccl:		CCL-specific utility files. Contains a CCL implementation of an interface for managing resource files (e.g., sounds, images)

build:		Code to generate a single source file from current code in the repo.

docs:		Archived documentation and reference manuals found online.
		-No docs for this specific stuff yet

easygui:	Any .lisp extensions to CCL's easygui package. 
		-Contains a few bug fixes, and an extension which provides a Cocoa view that does not respond to mouse activity	

scratch:	Stray lisp code, experimental, etc.
		-None of this is loaded for any of the tests

submodules:	Source code for actr and ccl
		-actr is newest version (as of Jun 2012). All code is same except that loader files (loader.lisp) are inside each of the tutorial folders
		-ccl is newest version (as of Jun 2012). Original image. Used to reference ccl src and run basic ccl core file
		-lisp-dev is a git repo for building a custom ccl core that I use during development. I'm using some of the src for the utilities in the GUI code,
			so the builds here grab some of that src.
		-rmcl is the newest version; no changes; used to reference rmcl src, and run rmcl for each of the tests.

testing:	Source code for testing the ccl code
		-testCCLDevice.lisp: Used to test basic functionality of building a Cocoa display by writing lisp code that meets the uwi.lisp interface spec
		-testTutorials.lisp: Runs ACT-R through all tutorials; checks that ACT-R can 'see' CCL's Cocoa device
		-testImages.lisp: Tests that the CCL resources.lisp file correctly manages images
		-testVotebox.lisp: Tests to run Votebox on CCL
		-testPhaser.lisp: Tests to run Phaser on CCL
	
Main files:	

actr6/devices/ccl/share.lisp: Implements basic MCL GUI interface in CCL. Leverages CCL's easygui package so that a Cocoa window can be used in CCL.
actr6/devices/ccl/uwi.lisp: CCL's implementation of the RPM interface. Note that this file is identical to MCL's file
actr6/devices/ccl/device.lisp: CCL's implementation of the RPM interface. Only slight changes to this file compared to MCL's file. I'm trying to keep these to a minimum.


To run the tests:
		-Mount RedGiant volume	
		-Navigate to the Projects/mcl-migration folder on RedGiant
		-Either access the data in the folder over the network (preferred), or copy the folder locally if you want to access it w/o internet.
		-Download Clozure CL from the App Store and install if you don't have it yet.
		-Launch Clozure CL
		-Use the Cocoa listener to load ACT-R, then the GUI interface code, then a test file

		e.g.:
		Launch Clozure CL
		Load act-r in ./submodules/actr6/load-act-r-6.lisp
		Load ccl-simple-view in ./build/ccl-simple-view.lisp
		Load Votebox in ./testing/testVotebox.lisp

		If you don't want to run the votebox test code, and just votebox, then after the ccl-simple-view is loaded, you can refer to the votebox docs and load it that way.
		testVotebox.lisp just loads the files for votebox that are listed in the docs.
	

