Directory Structure:
.
├── actr6
│   └── devices
├── docs
│   ├── Getting\ Started\ with\ MCL.pdf
│   ├── InterfaceBuilderWithCCLTutorial.pdf
│   └── Macintosh\ Common\ Lisp\ Ref.pdf
├── easygui
│   └── extensions.lisp
├── scratch
│   ├── it-example1.lisp
│   └── scratch.lisp
├── submodules
│   ├── actr6
│   └── ccl
└── testing
    ├── actr6 -> ../submodules/actr6
    ├── bootstrap.lisp
    ├── testCCLDevice.dx64fsl
    ├── testCCLDevice.lisp
    ├── testTutorials.dx64fsl
    ├── testTutorials.lisp
    ├── testVotebox.lisp

actr6:		All .lisp files needed to build an ACT-R device for CCL that uses a Cocoa display. 
		-Note the share.lisp file lives here for now, which contains the MCL GUI interface for CCL

docs:		Archived documentation and reference manuals found online.
		-No docs for this specific stuff yet

easygui:	Any .lisp extensions to CCL's easygui package. 
		-Contains a few bug fixes, and an extension which provides a Cocoa view that does not respond to mouse activity	

scratch:	Stray lisp code, experimental, etc.
		-None of this is loaded for any of the tests

submodules:	Source code for actr and ccl
		-actr is newest version (as of Jun 2012). All code is same except that loader files (loader.lisp) are inside each of the tutorial folders
		-ccl is newest version (as of Jun 2012). Image is modified. I added a few helper functions/packages that I like to use for a testing environment.
		 This means that you'll have to load this ccl image if you want to run the tests

testing:	Source code for testing the ccl code
		-testCCLDevice.lisp: Used to test basic functionality of building a Cocoa display by writing lisp code that meets the uwi.lisp interface spec
		-testTutorials.lisp: Runs ACT-R through all tutorials; checks that ACT-R can 'see' CCL's Cocoa device
	

Main files:	

actr6/devices/ccl/share.lisp: Implements basic MCL GUI interface in CCL. Leverages CCL's easygui package so that a Cocoa window can be used in CCL.
actr6/devices/ccl/uwi.lisp: CCL's implementation of the RPM interface. Note that this file is identical to MCL's file
actr6/devices/ccl/device.lisp: CCL's implementation of the RPM interface. Only slight changes to this file compared to MCL's file. I'm trying to keep these to a minimum.


To run the tests:
		-Mount RedGiant volume	
		-Navigate to the mcl-migration folder on RedGiant
		-launch the custom ccl image and require :cocoa
		-A Cocoa listener should pop up
		-Use the Cocoa listener to load one of the test files

		e.g.:
		CHIL-Nebula:mcl-migration claytonstanley$ cd /Volumes/RedGiant/Projects/mcl-migration/
		CHIL-Nebula:mcl-migration claytonstanley$ cd submodules/ccl
		CHIL-Nebula:ccl claytonstanley$ ./ccl -e '(require :cocoa)'
		[Load up mcl-migration/testing/testCCLDevice.lisp]
		[try loading testTutorials.lisp, etc.]
	



